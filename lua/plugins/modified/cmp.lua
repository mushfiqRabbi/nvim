return {
  -- "hrsh7th/nvim-cmp",
  -- opts = {
  --   mapping = require("cmp").mapping.preset.insert({
  --     ["<C-Space>"] = require("cmp").mapping({
  --       i = function(fallback)
  --         if require("cmp").visible() then
  --           require("cmp").close()
  --         elseif not require("cmp").visible() then
  --           require("cmp").complete()
  --         else
  --           fallback()
  --         end
  --       end,
  --     }),
  --   }),
  --   -- formatting = {
  --   --   format = function(entry, item)
  --   --     local icons = require("lazyvim.config").icons.kinds
  --   --
  --   --     -- Get the completion entry text shown in the completion window.
  --   --     local content_one = item.abbr
  --   --     local content_two = item.menu
  --   --
  --   --     -- Get the width of the current window.
  --   --     local win_width = vim.api.nvim_win_get_width(0)
  --   --
  --   --     -- or a percentage of the window width, in this case 25%.
  --   --     local max_content_width = math.floor(win_width * 0.25)
  --   --
  --   --     -- Truncate the completion entry text if it's longer than the
  --   --     -- max content width. We subtract 3 from the max content width
  --   --     -- to account for the "..." that will be appended to it.
  --   --     if icons[item.kind] then
  --   --       item.kind = icons[item.kind] .. item.kind
  --   --     end
  --   --
  --   --     if content_one then
  --   --       if #content_one > max_content_width then
  --   --         item.abbr = vim.fn.strcharpart(content_one, 0, max_content_width - 3) .. "..."
  --   --         -- item.abbr = content_one .. (" "):rep(max_content_width - #content_one)
  --   --       end
  --   --     end
  --   --
  --   --     if content_two then
  --   --       if #content_two > max_content_width then
  --   --         item.menu = vim.fn.strcharpart(content_two, 0, max_content_width - 3) .. "..."
  --   --         -- item.menu = content_two .. (" "):rep(max_content_width - #content_two)
  --   --       end
  --   --     end
  --   --
  --   --     return require("tailwindcss-colorizer-cmp").formatter(entry, item)
  --   --   end,
  --   -- },
  --   --
  --   experimental = {
  --     ghost_text = false,
  --   },
  -- },
}
